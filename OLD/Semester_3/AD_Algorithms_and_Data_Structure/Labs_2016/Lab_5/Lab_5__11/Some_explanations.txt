word  depth  count


Nubers of nodes: 
Average depth:
Standard deviation:

1/(N-1)

от нас хотят, что бы провели несколько тестов

в первом k = 2 и тогда по формуле N = 2^k - 1 => N = 2^2 - 1 = 3
далее k = 4 и тогда по формуле N = 2^k - 1 => N = 2^4 - 1 = 15
далее k = 6 и тогда по формуле N = 2^k - 1 => N = 2^6 - 1 = 64 - 1 = 63
...
в конце k = kmax = 10 N = 2^10 -1 = 1024 - 1 = 1023

Так вот, на каждой итерации из списка слов нужно брать не все, а только то к-во, которому равняется N и добавлять только столько слов
У нас 932 слова, значит в последнем случае возьмем чуть меньше чем нужно

BST
k = 2 => 3
k = 4 => 8
k = 6 => 14
k = 8 => 20
k = 10 => 26

RBST
k = 2 => 2
k = 4 => 8
k = 6 => 11
k = 8 => 14
k = 10 =>24

Как видим, RBST немного лучше, но можно провести другой тест, в котором будем добавлять отсортированный список, тогда первый способ будет давать всегда глубину
равную к-ву элементов, а второй не изменит результата
Такой неплохой результат (может быть наного хуже) первого способа благодаря тому, что мы изначально используем рэндомные входные данные. Он очень зависит от порядка данных 
и результат будет отличаться от случая к случаю