Pseudocode program:

while(Strings are in the input)
{
	if(String is convertable to double d)
	{
		stack.push(d)
	}
	else if(String is a binary operator op)
	{
		stack.push(stack.pop() op stack.pop())
	}
	else ERROR
}
return stack.pop() // returns the result

Input:
"8.8 2.2 0.2 * /"
gives:
20.0

( 8.8 / (2.2 * 0.2) )	infix
FPAE
enter 8.8 2.2 0.2 * /	postfix

[3 enter 2 enter -] = [3-2] = 1

Program:
input: sequence of Strings of a Fully Parenthsized Arithmetic Expression(FPAE, infix)
output: seq. of Strings of a postfix AE (Reverse Polish Notation)

while(Strings are in the input)
{
	if(String is convertable to a double )
	{
		write String to the output
	}
	else if (String is a binary operator op)
	{
		stack.push(op)
	}
	else if (String is a ")" )
	{
		write(stack.pop) to the output
	}
	else
	{
		do nothing
	}
}
return

( (8.8 / 2.2) * 0.2 )
enter 8.8 2.2 / 0.2 *

for lab:
API (oracle): StringTokenizer(), Double()

MSCW:
Must
Should
Could (opt.)
Won't

Как ты уже понял, существует два основных способа записи математических выражений
Первый – тот, к которому мы привыкли, для него нужны скобки и знак =
Второй способ называют польской нотацией, он позволяет не используя скобки и знак равно посчитать любое математическое выражение.
Этот способ удобен тем, что его проще представить в виде алгоритма на любом языке программирования. В основе этого алгоритма лежит использование структуры данных, которая называется стэк.
Работа со стэком очень простая. В него всегда элементы добавляются в конец (push), и забираются тоже с конца(pop). Других операций над стэком не предусмотрено. Прелесть в том, что этого достаточно, для написание программы, которая разберет польскую нотацию.
Можно сказать наоборот, что добавляет всегда вначало и забираем тоже из начала, это не принципиально. Это действительно легче всего представить как стопку чего либо, когда добавлять и забирать можно только с самой вершины.
Примеры (здесь и далее 1) – обычный способ, 2) – польская нотация):
1)	1 + 2 =
2)	1 2 + (все эти символы будем называть «список знаков»)
Работае оно так. Берем элементы слева направо. Если это не знак операции – значит это число, ложим его на вершину стэка (push).
Так можно положить подряд несколько чисел, но для начала разберем, когда их только два.
После того, как получаем любой знак операции (+, -, *, /), то: а) со стэка снимается два последних значения (два pop подряд!) б) над ними проводится , описываемое этим знаком операции в) результат вычисления ложится на стэк (push). 
Когда в «списке знаков» не остается ни одного символа – вычисления окончены и забираем со стэка (pop) значение, которое есть результатом всех операций.
Здесь две задачи, первая научиться переписывать обычное выражение в польской нотации, вторая – понять, как работает алгоритм, сначала учимся записывать в польской нотации
3+2-1=4
3 2 + 1 –

2 + 6 / 3 = 
6 3 / 2+

(2 + 6) / 3 =
2 6 + 3 /

(1 – 3 + 2/3) / (2 + 3) =
2 3 / 1 3 - + 2 3 + /

4 2 / 1 3 - + 2 3 + /
Когда разбирают такое выражение, на самом деле существует два объекта: 1) список, который разбираем (он не меняется, но в нем позиция символа, который в текущий момент обрабатываем, будем показывать подчерком) 2) стэк, он постоянно меняется (будем показывать стопочкой)
4 2 / 1 3 - + 2 3 + /
4
4 2 / 1 3 - + 2 3 + /
4
2
4 2 / 1 3 - + 2 3 + /
2
4 2 / 1 3 - + 2 3 + /
2
1
4 2 / 1 3 - + 2 3 + /
2
1
3
4 2 / 1 3 - + 2 3 + /
2
-2
4 2 / 1 3 - + 2 3 + /
0
4 2 / 1 3 - + 2 3 + /
0
2
4 2 / 1 3 - + 2 3 + /
0
2
3
4 2 / 1 3 - + 2 3 + /
0
5
4 2 / 1 3 - + 2 3 + /
0

Работае оно так. Берем элементы слева направо. Если это не знак операции – значит это число, ложим его на вершину стэка (push).
После того, как получаем любой знак операции (+, -, *, /), то: а) со стэка снимается два последних значения (два pop подряд!) б) над ними проводится , описываемое этим знаком операции в) результат вычисления ложится на стэк (push). 
Когда в «списке знаков» не остается ни одного символа – вычисления окончены и забираем со стэка (pop) значение, которое есть результатом всех операций.
Здесь две задачи, первая научиться переписывать обычное выражение в польской нотации, вторая – понять, как работает алгоритм, сначала учимся записывать в польской нотации
Запишем этот алгоритм почти на языке программирования, тезисно:
1)	Перебираем элементы со «списка знаков» по порядку
2)	Текущий элемент (elem) это число
a.	Да – push(число)
b.	Нет – op = elem; b = pop (); a = pop(); res = a op b; push(res); Распишем res = a op b подробнее
If (op == '+')
	Res = a + b;
Else if (op == '/')
	Res = a / b;
3)	Когда в списке ничего не осталось – вывести на экран результат pop()

У нас есть два варианта, для первого раза хватит и ты отдыхаешь ;)
Второй – пишем сейчас эту программу, около часа времени
3 3 + 3 /
(3+3)/3 =2


